pipeline {
    agent any

    environment {
        // Artifactory Docker repository details
        DOCKER_REGISTRY = "trial4w4crx.jfrog.io"
        DOCKER_REPO = "vault-repo"
        IMAGE_NAME = "vault-server"
        BASE_VERSION = "1.0"
        IMAGE_TAG = "${BASE_VERSION}.${BUILD_NUMBER}"  // Dynamically create the tag with build number

        // Kubernetes config
        K8S_NAMESPACE = "default"
        K8S_DEPLOYMENT_NAME = "vault"

        // Credentials IDs for Jenkins
        GITHUB_CREDENTIALS_ID = "github-credentials-id"
        JFROG_CREDENTIALS_ID = "jfrog-credentials-id"

        // Repository URL
        REPO_URL = "https://github.com/Ashishm96/hashicorp-vault-deployment.git"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out code from GitHub...'
                    checkout scm
                }
            }
        }

        stage('Verify Docker Access') {
            steps {
                script {
                    echo 'Verifying Docker CLI is accessible...'
                    sh 'docker --version'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    try {
                        sh """
                            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f docker/Dockerfile .
                        """
                    } catch (Exception e) {
                        error "Docker build failed: ${e}"
                    }
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                script {
                    echo 'Listing Docker images to verify the build...'
                    sh 'docker images'
                }
            }
        }

        stage('Push Docker Image to Artifactory') {
            steps {
                script {
                    echo "Tagging the image and pushing to Artifactory..."

                    // Tag the image before pushing
                    try {
                        sh """
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}
                            echo "Docker image tagged as ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                        """
                    } catch (Exception e) {
                        error "Docker image tagging failed: ${e}"
                    }

                    // Log in to Artifactory and push the image using Jenkins credentials
                    docker.withRegistry("https://${DOCKER_REGISTRY}", JFROG_CREDENTIALS_ID) {
                        try {
                            echo "Pushing image to Artifactory..."
                            sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                        } catch (Exception e) {
                            error "Docker push to Artifactory failed: ${e}"
                        }
                    }

                    // Verify the pushed image by pulling it from Artifactory
                    echo "Verifying pushed image by pulling it..."
                    docker.withRegistry("https://${DOCKER_REGISTRY}", JFROG_CREDENTIALS_ID) {
                        sh "docker pull ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            parallel {
                stage('Apply Kubernetes Resources') {
                    steps {
                        script {
                            echo "Applying Kubernetes resources (config, secret, ingress)..."
                            try {
                                sh "kubectl apply -f k8s/vault-config.yaml --namespace=${K8S_NAMESPACE}"
                                sh "kubectl apply -f k8s/vault-secret.yaml --namespace=${K8S_NAMESPACE}"
                                sh "kubectl apply -f k8s/jfrog-registry-secret.yaml --namespace=${K8S_NAMESPACE}"
                                sh "kubectl apply -f k8s/vault-ingress.yaml --namespace=${K8S_NAMESPACE}"
                            } catch (Exception e) {
                                error "Kubernetes resource application failed: ${e}"
                            }
                        }
                    }
                }
                stage('Deploy Vault to Kubernetes') {
                    steps {
                        script {
                            echo "Deploying Vault image to Kubernetes..."
                            try {
                                sh """
                                    kubectl config use-context minikube
                                    kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG} --namespace=${K8S_NAMESPACE}
                                """
                            } catch (Exception e) {
                                error "Kubernetes deployment update failed: ${e}"
                            }
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "Checking the health status of the deployment..."
                    try {
                        sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}"
                    } catch (Exception e) {
                        error "Deployment health check failed: ${e}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
        always {
            cleanWs() // Clean the workspace after execution
        }
    }
}
