pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "trial4w4crx.jfrog.io"
        DOCKER_REPO = "vault-repo"
        IMAGE_NAME = "vault-server"
        IMAGE_TAG = "latest"

        K8S_NAMESPACE = "default"
        K8S_DEPLOYMENT_NAME = "vault"

        GITHUB_CREDENTIALS_ID = "github-credentials-id"
        JFROG_CREDENTIALS_ID = "jfrog-credentials-id"

        REPO_URL = "https://github.com/Ashishm96/hashicorp-vault-deployment.git"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: GITHUB_CREDENTIALS_ID, url: REPO_URL
            }
        }

        stage('Verify Docker Access') {
            steps {
                sh 'docker --version'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh """
                        export DOCKER_BUILDKIT=1
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f docker/Dockerfile .
                    """
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                sh 'docker images'
            }
        }

        stage('Push Docker Image to Artifactory') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", JFROG_CREDENTIALS_ID) {
                        def appImage = docker.image("${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
                        appImage.push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Deploy to Kubernetes using kubectl
                    sh """
                        kubectl config use-context minikube
                        kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG} --namespace=${K8S_NAMESPACE}
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    // Check deployment status
                    sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
        always {
            cleanWs() // Clean the workspace after execution
        }
    }
}
